# 백엔드 CI/CD 파이프라인
# backend/ 폴더 변경 시 자동으로 Docker 이미지 빌드 및 배포
name: Backend CI/CD Pipeline

on:
  push:
    branches: [ master ]
    paths:
      - 'backend/**'    # 백엔드 코드 변경 시 실행
      - 'shared/**'     # 공통 코드 변경 시 실행
      - '.github/workflows/backend-ci.yml' # 이 워크플로우 파일 변경 시 실행
      - 'k8s/**'
  pull_request:
    branches: [ master ]
    paths:
      - 'backend/**'
      - 'shared/**'
      - '.github/workflows/backend-ci.yml' # 이 워크플로우 파일 변경 시 실행
      - 'k8s/**'
env:
  DOCKER_IMAGE: dorrry/k8s-gitops-app-backend
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_TOKEN }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=sha,prefix=
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
        
    - name: Image digest
      run: echo "${{ steps.meta.outputs.tags }}"
      
    - name: Update backend deployment image tag
      if: github.ref == 'refs/heads/master'
      run: |
        # 이미지 태그 추출 (ArgoCD Image Updater용)
        IMAGE_SHA=$(echo "${{ steps.meta.outputs.tags }}" | grep -o '[a-f0-9]\{7\}' | head -1)
        
        # 이미지 빌드 완료 - ArgoCD Image Updater가 자동 감지
        echo "Backend image built: ${{ env.DOCKER_IMAGE }}:$IMAGE_SHA"
        echo "ArgoCD Image Updater will automatically detect and deploy this image"
